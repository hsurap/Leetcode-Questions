/*
Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.

 

Example 1:

Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].
*/
class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& interval) {
        vector<vector<int>> result;
        
        if(interval.size()==0)return result;

        sort(interval.begin(),interval.end());
        
        result.push_back(interval[0]);
        int j=0;
        
        for(int i=1;i<interval.size();i++)
        {
        
            if(result[j][1]>=interval[i][0]) result[j][1]=max(result[j][1],interval[i][1]);
            
            else
            {
                j++;
                result.push_back(interval[i]);
            }
        }
        return result;
    }
};
